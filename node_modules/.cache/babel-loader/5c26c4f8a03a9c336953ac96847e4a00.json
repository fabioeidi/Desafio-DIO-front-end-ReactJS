{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from \"react\";\nimport api from \"../services/api\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    hadUser: false,\n    loading: false,\n    user: {\n      id: undefined,\n      avatar: undefined,\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    setGithubState(prevState => ({ ...prevState,\n      loading: !prevState.loading\n    }));\n    api.get(`users/${username}`).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      setGithubState(prevState => ({ ...prevState,\n        hasUser: true,\n        user: {\n          id: data.id,\n          avatar: data.avatar_url,\n          login: data.login,\n          name: data.name,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos\n        }\n      }));\n    }).finally(() => {\n      setGithubState(prevState => ({}));\n    });\n  };\n};\n\n_s(GithubProvider, \"xFXaBtcoKn0slgFXv0VBGB9cKho=\");\n\n_c = GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"sources":["C:/Users/Fabio/Desktop/Estudos/repositorio/Desafio_DIO_ReactJS/src/providers/github-provider.js"],"names":["React","createContext","useCallback","useState","api","GithubContext","loading","user","repositories","starred","GithubProvider","children","githubState","setGithubState","hadUser","id","undefined","avatar","login","name","html_url","blog","company","location","followers","following","public_gists","public_repos","getUser","username","prevState","get","then","data","hasUser","avatar_url","finally"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC;AACzCK,EAAAA,OAAO,EAAE,KADgC;AAEzCC,EAAAA,IAAI,EAAE,EAFmC;AAGzCC,EAAAA,YAAY,EAAE,EAH2B;AAIzCC,EAAAA,OAAO,EAAE;AAJgC,CAAD,CAAnC;;AAOP,MAAMC,cAAc,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACrC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAE;AAC9CW,IAAAA,OAAO,EAAE,KADqC;AAE9CR,IAAAA,OAAO,EAAE,KAFqC;AAG9CC,IAAAA,IAAI,EAAE;AACJQ,MAAAA,EAAE,EAAEC,SADA;AAEJC,MAAAA,MAAM,EAAED,SAFJ;AAGJE,MAAAA,KAAK,EAAEF,SAHH;AAIJG,MAAAA,IAAI,EAAEH,SAJF;AAKJI,MAAAA,QAAQ,EAAEJ,SALN;AAMJK,MAAAA,IAAI,EAAEL,SANF;AAOJM,MAAAA,OAAO,EAAEN,SAPL;AAQJO,MAAAA,QAAQ,EAAEP,SARN;AASJQ,MAAAA,SAAS,EAAE,CATP;AAUJC,MAAAA,SAAS,EAAE,CAVP;AAWJC,MAAAA,YAAY,EAAE,CAXV;AAYJC,MAAAA,YAAY,EAAE;AAZV,KAHwC;AAiB9CnB,IAAAA,YAAY,EAAE,EAjBgC;AAkB9CC,IAAAA,OAAO,EAAE;AAlBqC,GAAF,CAA9C;;AAqBA,QAAMmB,OAAO,GAAIC,QAAD,IAAc;AAC5BhB,IAAAA,cAAc,CAAEiB,SAAD,KAAgB,EAC7B,GAAGA,SAD0B;AAE7BxB,MAAAA,OAAO,EAAE,CAACwB,SAAS,CAACxB;AAFS,KAAhB,CAAD,CAAd;AAKAF,IAAAA,GAAG,CACA2B,GADH,CACQ,SAAQF,QAAS,EADzB,EAEGG,IAFH,CAEQ,SAAY;AAAA,UAAX;AAACC,QAAAA;AAAD,OAAW;AAChBpB,MAAAA,cAAc,CAAEiB,SAAD,KAAgB,EAC7B,GAAGA,SAD0B;AAE7BI,QAAAA,OAAO,EAAE,IAFoB;AAG7B3B,QAAAA,IAAI,EAAE;AACJQ,UAAAA,EAAE,EAAEkB,IAAI,CAAClB,EADL;AAEJE,UAAAA,MAAM,EAAEgB,IAAI,CAACE,UAFT;AAGJjB,UAAAA,KAAK,EAAEe,IAAI,CAACf,KAHR;AAIJC,UAAAA,IAAI,EAAEc,IAAI,CAACd,IAJP;AAKJC,UAAAA,QAAQ,EAAEa,IAAI,CAACb,QALX;AAMJC,UAAAA,IAAI,EAAEY,IAAI,CAACZ,IANP;AAOJC,UAAAA,OAAO,EAAEW,IAAI,CAACX,OAPV;AAQJC,UAAAA,QAAQ,EAAEU,IAAI,CAACV,QARX;AASJC,UAAAA,SAAS,EAAES,IAAI,CAACT,SATZ;AAUJC,UAAAA,SAAS,EAAEQ,IAAI,CAACR,SAVZ;AAWJC,UAAAA,YAAY,EAAEO,IAAI,CAACP,YAXf;AAYJC,UAAAA,YAAY,EAAEM,IAAI,CAACN;AAZf;AAHuB,OAAhB,CAAD,CAAd;AAkBD,KArBH,EAsBGS,OAtBH,CAsBW,MAAM;AACbvB,MAAAA,cAAc,CAAEiB,SAAD,KAAgB,EAAhB,CAAD,CAAd;AAGD,KA1BH;AA2BD,GAjCD;AAkCD,CAxDD;;GAAMpB,c;;KAAAA,c","sourcesContent":["import React, { createContext, useCallback, useState } from \"react\";\r\nimport api from \"../services/api\";\r\n\r\nexport const GithubContext = createContext({\r\n  loading: false,\r\n  user: {},\r\n  repositories: [],\r\n  starred: [],\r\n});\r\n\r\nconst GithubProvider = ({children}) => {\r\n  const [githubState, setGithubState] = useState ({\r\n    hadUser: false,\r\n    loading: false,\r\n    user: {\r\n      id: undefined,\r\n      avatar: undefined,\r\n      login: undefined,\r\n      name: undefined,\r\n      html_url: undefined,\r\n      blog: undefined,\r\n      company: undefined,\r\n      location: undefined,\r\n      followers: 0,\r\n      following: 0,\r\n      public_gists: 0,\r\n      public_repos: 0,\r\n    },\r\n    repositories: [],\r\n    starred: [],\r\n  });\r\n\r\n  const getUser = (username) => {\r\n    setGithubState((prevState) => ({\r\n      ...prevState,\r\n      loading: !prevState.loading,\r\n    }));\r\n\r\n    api\r\n      .get(`users/${username}`)\r\n      .then(({data}) => {\r\n        setGithubState((prevState) => ({\r\n          ...prevState,\r\n          hasUser: true,\r\n          user: {\r\n            id: data.id,\r\n            avatar: data.avatar_url,\r\n            login: data.login,\r\n            name: data.name,\r\n            html_url: data.html_url,\r\n            blog: data.blog,\r\n            company: data.company,\r\n            location: data.location,\r\n            followers: data.followers,\r\n            following: data.following,\r\n            public_gists: data.public_gists,\r\n            public_repos: data.public_repos,\r\n          },\r\n        }));\r\n      })\r\n      .finally(() => {\r\n        setGithubState((prevState) => ({\r\n          \r\n        }))\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}